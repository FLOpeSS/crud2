package main

import (
	"database/sql"
	"fmt"
	"html/template"
	"log"
	"net/http"

	_ "github.com/go-sql-driver/mysql"
	"github.com/gorilla/mux"
)

var db *sql.DB
var tmpl = template.Must(template.ParseGlob("tmpl/*"))

type Names struct {
	Id    int
	Name  string
	Email string
}

func dbConn() *sql.DB {
	db, err := sql.Open("mysql", "sneto:jms@tcp(127.0.0.1:3306)/crud")
	if err != nil {
		fmt.Println("err: ", err)
	}
	defer db.Close()
	return db
}

func main() {
	r := mux.NewRouter()
	r.HandleFunc("/", homepage).Methods("GET")
	r.HandleFunc("/show", show)
	r.HandleFunc("/new", newUser)
	r.HandleFunc("/edit", edit)

	fmt.Println("Server ruuning at port: 3000")
	log.Fatal(http.ListenAndServe(":3000", r))
}

func homepage(w http.ResponseWriter, r *http.Request) {
	db := dbConn()
	que, err := db.Query("SELEC * FROM names ORDER BY id DESC")
	if err != nil {
		fmt.Println("err: ", err)
	}
	n := Names{}
	res := []Names{}

	for que.Next() {
		var id int
		var name, email string

		err = que.Scan(&id, &name, &email)
		if err != nil {
			fmt.Println("Error: ", err)
		}
	}

}

func show(w http.ResponseWriter, r *http.Request) {
	fmt.Println("request from show")
}

func newUser(w http.ResponseWriter, r *http.Request) {
	fmt.Println("request from newUser")
}

func edit(w http.ResponseWriter, r *http.Request) {
	fmt.Println("request from edit")
}
